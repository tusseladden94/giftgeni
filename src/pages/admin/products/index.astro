---
import Layout from '../../../layouts/Layout.astro';
import Header from '../../../components/Header.astro';
import { Plus, AlertCircle, Trash2, Edit2, Eye, EyeOff } from 'lucide-astro';
import { requireAuth } from '../../../middleware/auth';
import { supabase } from '../../../lib/supabase';
import type { Product } from '../../../lib/supabase';

// Check authentication
const authRedirect = requireAuth(Astro);
if (authRedirect) return authRedirect;

let message = '';
let error = '';

// Fetch products
const { data: products } = await supabase
  .from('products')
  .select('*')
  .order('created_at', { ascending: false });

const categories = [
  'Tech & Gadgets',
  'Home & Kitchen',
  'Fashion',
  'Beauty',
  'Sports & Outdoors',
  'Toys & Games',
  'Books',
  'Other'
];
---

<Layout title="Admin - Products">
  <Header />
  
  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-2xl font-heading font-bold text-dark">Manage Products</h1>
      <button
        id="addProduct"
        class="inline-flex items-center space-x-2 bg-primary text-white px-6 py-3 rounded-lg font-medium hover:bg-primary/90 transition-colors"
      >
        <Plus class="w-5 h-5" />
        <span>Add Product</span>
      </button>
    </div>

    {message && (
      <div class="mb-6 p-4 bg-green-50 text-green-700 rounded-lg flex items-center">
        <AlertCircle class="w-5 h-5 mr-2" />
        {message}
      </div>
    )}

    {error && (
      <div class="mb-6 p-4 bg-red-50 text-red-700 rounded-lg flex items-center">
        <AlertCircle class="w-5 h-5 mr-2" />
        {error}
      </div>
    )}

    <!-- Add Product Form -->
    <div id="addProductForm" class="hidden mb-8">
      <form id="productForm" class="bg-white p-6 rounded-xl shadow-sm space-y-6">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            Amazon Affiliate URL
          </label>
          <input
            type="url"
            name="affiliateUrl"
            required
            placeholder="Paste your Amazon affiliate URL here"
            class="w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-primary/50"
          />
          <p class="mt-2 text-sm text-gray-500">Use Amazon SiteStripe to generate affiliate links</p>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            Category
          </label>
          <select
            name="category"
            required
            class="w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-primary/50"
          >
            <option value="">Select a category</option>
            {categories.map(category => (
              <option value={category}>{category}</option>
            ))}
          </select>
        </div>

        <div class="flex justify-end space-x-4">
          <button
            type="button"
            id="cancelAdd"
            class="px-6 py-2 text-gray-600 hover:text-gray-800 transition-colors"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="bg-primary text-white px-6 py-2 rounded-lg font-medium hover:bg-primary/90 transition-colors"
          >
            Add Product
          </button>
        </div>
      </form>
    </div>

    <!-- Products List -->
    <div class="bg-white rounded-xl shadow-sm overflow-hidden">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Visibility</th>
            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          {products?.map((product: Product) => (
            <tr>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="flex items-center">
                  <img class="h-10 w-10 rounded-lg object-cover" src={product.image} alt="" />
                  <div class="ml-4">
                    <div class="text-sm font-medium text-gray-900">{product.title}</div>
                  </div>
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                  {product.category}
                </span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ${product.price}
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-center">
                <button
                  class="visibility-toggle"
                  data-product-id={product.id}
                  data-visible={product.is_visible}
                >
                  {product.is_visible ? 
                    <Eye class="w-5 h-5 text-green-500 hover:text-green-600" /> :
                    <EyeOff class="w-5 h-5 text-gray-400 hover:text-gray-500" />
                  }
                </button>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <div class="flex items-center justify-end space-x-2">
                  <button class="text-blue-400 hover:text-blue-600">
                    <Edit2 class="w-5 h-5" />
                  </button>
                  <button class="text-red-400 hover:text-red-600">
                    <Trash2 class="w-5 h-5" />
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </main>
</Layout>

<script>
  // Form handling
  const form = document.getElementById('productForm');
  const addButton = document.getElementById('addProduct');
  const cancelButton = document.getElementById('cancelAdd');
  const formContainer = document.getElementById('addProductForm');

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    
    try {
      const response = await fetch('/api/products', {
        method: 'POST',
        body: JSON.stringify({
          affiliateUrl: formData.get('affiliateUrl'),
          category: formData.get('category')
        }),
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const data = await response.json();
      
      if (data.success) {
        window.location.reload();
      } else {
        throw new Error(data.error);
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Failed to add product. Please try again.');
    }
  });

  // Toggle form visibility
  addButton?.addEventListener('click', () => {
    formContainer?.classList.remove('hidden');
  });

  cancelButton?.addEventListener('click', () => {
    formContainer?.classList.add('hidden');
  });

  // Handle visibility toggles
  document.querySelectorAll('.visibility-toggle').forEach(button => {
    button.addEventListener('click', async () => {
      const productId = button.getAttribute('data-product-id');
      const currentlyVisible = button.getAttribute('data-visible') === 'true';
      
      try {
        const response = await fetch('/api/products', {
          method: 'PUT',
          body: JSON.stringify({
            id: productId,
            is_visible: !currentlyVisible
          }),
          headers: {
            'Content-Type': 'application/json'
          }
        });

        if (response.ok) {
          window.location.reload();
        } else {
          throw new Error('Failed to update visibility');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to update product visibility');
      }
    });
  });
</script>