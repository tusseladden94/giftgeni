---
import { Filter, Layout as LayoutIcon, DollarSign, Star } from 'lucide-astro';

const layouts = [
  { id: 'grid', name: 'Grid View', icon: LayoutIcon },
  { id: 'list', name: 'List View', icon: LayoutIcon },
  { id: 'compact', name: 'Compact', icon: LayoutIcon }
];

const sortOptions = [
  { value: 'price-asc', label: 'Price: Low to High' },
  { value: 'price-desc', label: 'Price: High to Low' },
  { value: 'name', label: 'Name' },
  { value: 'store', label: 'Store' },
  { value: 'starred', label: 'Starred First' }
];

const occasions = [
  'Christmas',
  'Birthday',
  'Wedding',
  'Baby Shower',
  'Graduation',
  'Custom'
];
---

<div class="bg-white rounded-xl p-6 shadow-sm">
  <h2 class="text-xl font-semibold mb-6">Customize Your Wishlist</h2>
  
  <!-- Occasion & Title -->
  <div class="space-y-4 mb-8">
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-2">Occasion</label>
      <select 
        id="occasionSelect" 
        class="w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-primary/50"
      >
        {occasions.map(occasion => (
          <option value={occasion}>{occasion}</option>
        ))}
      </select>
    </div>
    
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-2">Custom Title</label>
      <input 
        type="text" 
        id="customTitle"
        placeholder="My Wishlist"
        class="w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-primary/50"
      />
    </div>
  </div>

  <!-- Layout Options -->
  <div class="mb-8">
    <label class="block text-sm font-medium text-gray-700 mb-2">Layout Style</label>
    <div class="grid grid-cols-3 gap-2">
      {layouts.map(({ id, name, icon: Icon }) => (
        <button
          data-layout={id}
          class="flex flex-col items-center p-3 rounded-lg border border-gray-200 hover:border-primary/50 transition-colors"
        >
          <Icon class="w-6 h-6 mb-2" />
          <span class="text-sm">{name}</span>
        </button>
      ))}
    </div>
  </div>

  <!-- Sort & Filter -->
  <div class="space-y-4 mb-8">
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-2">Sort By</label>
      <select 
        id="sortSelect" 
        class="w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-primary/50"
      >
        {sortOptions.map(({ value, label }) => (
          <option value={value}>{label}</option>
        ))}
      </select>
    </div>
  </div>

  <!-- Display Options -->
  <div class="space-y-4">
    <label class="flex items-center space-x-2">
      <input type="checkbox" id="showPrices" checked class="rounded text-primary focus:ring-primary" />
      <span class="text-sm font-medium text-gray-700">Show Prices</span>
    </label>

    <label class="flex items-center space-x-2">
      <input type="checkbox" id="showStores" checked class="rounded text-primary focus:ring-primary" />
      <span class="text-sm font-medium text-gray-700">Show Stores</span>
    </label>

    <label class="flex items-center space-x-2">
      <input type="checkbox" id="showNotes" checked class="rounded text-primary focus:ring-primary" />
      <span class="text-sm font-medium text-gray-700">Show Notes</span>
    </label>
  </div>
</div>

<script>
  // Initialize editor controls
  const controls = {
    occasion: document.getElementById('occasionSelect'),
    title: document.getElementById('customTitle'),
    sort: document.getElementById('sortSelect'),
    showPrices: document.getElementById('showPrices'),
    showStores: document.getElementById('showStores'),
    showNotes: document.getElementById('showNotes'),
  };

  // Emit events when controls change
  Object.entries(controls).forEach(([key, element]) => {
    element?.addEventListener('change', () => {
      const event = new CustomEvent('wishlist:update', {
        detail: {
          type: key,
          value: element instanceof HTMLInputElement ? element.checked : element.value
        }
      });
      document.dispatchEvent(event);
    });
  });

  // Layout buttons
  document.querySelectorAll('[data-layout]').forEach(button => {
    button.addEventListener('click', () => {
      const layout = button.getAttribute('data-layout');
      document.dispatchEvent(new CustomEvent('wishlist:update', {
        detail: { type: 'layout', value: layout }
      }));
    });
  });
</script>